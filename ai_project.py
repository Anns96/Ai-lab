# -*- coding: utf-8 -*-
"""Ai project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11tBSoMHmOJv2-G1CHFjpjkLC_4gmwtUu
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

# ---------------------- Lab 9 ---------------------- #
print("\n--- Lab 9: Load & Explore Titanic Dataset ---\n")

# Load Titanic dataset (from seaborn or CSV)
try:
    df = pd.read_csv("titanic.csv")
except:
    from seaborn import load_dataset
    df = load_dataset("titanic")
    df.to_csv("titanic.csv", index=False)  # Save locally for reuse

print("‚úÖ Data Loaded")
print(df.head())
print(df.info())
print("\nMissing values:\n", df.isnull().sum())

# ---------------------- Lab 10 ---------------------- #
print("\n--- Lab 10: Data Pre-Processing ---\n")

# Select relevant columns
df = df[['survived', 'pclass', 'sex', 'age']]

# Handle missing values
df['age'].fillna(df['age'].median(), inplace=True)

# Encode 'sex' to numbers
le = LabelEncoder()
df['sex'] = le.fit_transform(df['sex'])  # male=1, female=0

# Ensure all are integers
df = df.astype({'pclass': 'int', 'sex': 'int', 'age': 'int', 'survived': 'int'})

print("‚úÖ Cleaned data preview:\n", df.head())

# ---------------------- Lab 11 ---------------------- #
print("\n--- Lab 11: Model Training, Testing & Prediction ---\n")

# Features and label
X = df[['age', 'sex', 'pclass']]
y = df['survived']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"üéØ Model Accuracy: {accuracy*100:.2f}%")

# ---------------------- User Prediction ---------------------- #
print("\n--- Predict Survival Based on Input ---")

# Get user input
try:
    age = int(input("Enter age: "))
    gender = input("Enter gender (male/female): ").strip().lower()
    pclass = int(input("Enter class (1, 2, or 3): "))

    gender_num = 1 if gender == "male" else 0

    # Make prediction
    user_input = pd.DataFrame([[age, gender_num, pclass]], columns=['age', 'sex', 'pclass'])
    prediction = model.predict(user_input)[0]

    print("\nüß† Prediction:")
    if prediction == 1:
        print("‚úÖ Survived")
    else:
        print("‚ùå Did Not Survive")
except Exception as e:
    print("‚ö†Ô∏è Invalid input:", e)